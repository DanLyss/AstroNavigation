import unittest
import numpy as np
import matplotlib.pyplot as plt
from converter_flat_hor import Star, Star_Cluster

#NOTE: DATE OF PHOTOS - 9/11/2001, location - Bremen, Bremen time 22:00


class TestProjectionOnDatasets(unittest.TestCase):
    DEBUG = True  # Set to False to disable plots

    def setUp(self):
        self.test_cases = [
            {
                "pixel_coords": [
                    (0, 0), (-83, -157), (-336, -86), (-334, 64), (-476, 178),
                    (-584, 279), (60, 261), (346, -81), (241, -196), (584, -172)
                ],
                "RA_Dec": [
                    ([11, 3, 46], [61, 44, 40]), ([11, 1, 53], [56, 22, 34]),
                    ([11, 53, 52], [53, 41, 21]), ([12, 15, 27], [57, 1, 39]),
                    ([12, 54, 3], [55, 57, 20]), ([13, 25, 57], [54, 55, 18]),
                    ([11, 31, 25], [69, 19, 29]), ([9, 31, 36], [63, 3, 17]),
                    ([9, 51, 3], [59, 1, 54]), ([8, 30, 20], [60, 42, 41])
                ],
                "AzAlt_deg": [
                    (156 + 37/60 + 43/3600, 30 + 29/60 + 59/3600),
                    (153 + 52/60 + 56/3600, 25 + 42/60 + 35/3600),
                    (145 + 14/60 + 52/3600, 27 + 22/60 + 44/3600),
                    (144 + 46/60 + 47/3600, 31 + 53/60 + 8/3600),
                    (139 + 11/60 + 51/3600, 34 + 40/60 + 26/3600),
                    (134 + 39/60 + 44/3600, 37 + 0/60 + 23/3600),
                    (158 + 53/60 + 0/3600, 38 + 22/60 + 0/3600),
                    (168 + 23/60 + 31/3600, 27 + 33/60 + 6/3600),
                    (164 + 35/60 + 42/3600, 24 + 23/60 + 12/3600),
                    (175 + 47/60 + 33/3600, 23 + 58/60 + 33/3600)
                ],
                "image_size": (1472, 801),
                "positional_angle_deg": 30 + 29 / 60 + 59 / 3600
            },
            {
               "pixel_coords" : [(0, 0), (370, -44), (474, -64), (159, 372), (-432, 34), (-688, 12), (-575, -122), (-623, -351),
                 (89, -196), (224, 333)
                ],
                "RA_Dec" :  [([23, 3, 52], [28, 5, 32]), ([22, 50, 5], [24, 36, 40]),
                    ([22, 46, 37], [23, 34, 31]), ([22, 43, 5], [30, 13, 50]),
                    ([23, 22, 0], [31, 49, 18]), ([23, 34, 43], [33, 30, 23]),
                    ([23, 34, 3], [31, 20, 4]), ([23, 44, 5], [29, 22, 14]),
                    ([23, 7, 12], [25, 28, 40]), ([22, 41, 51], [29, 19, 2])
                ],
                "AzAlt_deg": [
                    (107 + 47 / 60 + 18 / 3600, 47 + 59 / 60 + 26 / 3600),
                    (114 + 35 / 60 + 15 / 3600, 47 + 12 / 60 + 10 / 3600),
                    (116 + 25 / 60 + 30 / 3600, 46 + 50 / 60 + 27 / 3600),
                    (111 + 0 / 60 + 58 / 3600, 52 + 33 / 60 + 32 / 3600),
                    (99 + 41 / 60 + 8 / 3600, 48 + 6 / 60 + 0 / 3600),
                    (95 + 5 / 60 + 57 / 3600, 47 + 23 / 60 + 42 / 3600),
                    (97 + 29 / 60 + 20 / 3600, 45 + 57 / 60 + 50 / 3600),
                    (97 + 11 / 60 + 45 / 3600, 43 + 2 / 60 + 59 / 3600),
                    (109 + 23 / 60 + 14 / 3600, 45 + 30 / 60 + 13 / 3600),
                    (112 + 18 / 60 + 56 / 3600, 52 + 2 / 60 + 2 / 3600)
                ],
                "image_size": (1663, 780),
                "positional_angle_deg": 47 + 59 / 60 + 26 / 3600
            },
            {
                "pixel_coords": [(0, 0), (80, 124), (527, -298), (-634, 269), (-344, 259),
                                 (-288, 300), (-69, 351), (-260, -111), (-25, -79), (189, -257)
                                 ],
                "RA_Dec": [([0, 56, 50], [60, 43, 23]), ([0, 9, 18], [59, 9, 27]),
                           ([1, 9, 50], [35, 37, 41]), ([2, 34, 25], [89, 15, 58]),
                           ([23, 39, 30], [77, 38, 24]), ([23, 8, 1], [75, 23, 44]),
                           ([22, 49, 47], [66, 12, 33]), ([2, 29, 13], [67, 24, 21]),
                           ([1, 25, 56], [60, 14, 28]), ([1, 38, 6], [48, 38, 4])
                           ],
                "AzAlt_deg": [
                    (48 + 18 / 60 + 17 / 3600, 50 + 52 / 60 + 28 / 3600),
                    (54 + 15 / 60 + 52 / 3600, 55 + 53 / 60 + 30 / 3600),
                    (75 + 2 / 60 + 18 / 3600, 34 + 42 / 60 + 49 / 3600),
                    (1 + 12 / 60 + 11 / 3600, 52 + 56 / 60 + 36 / 3600),
                    (19 + 45 / 60 + 1 / 3600, 58 + 40 / 60 + 28 / 3600),
                    (22 + 36 / 60 + 37 / 3600, 61 + 11 / 60 + 19 / 3600),
                    (41 + 9 / 60 + 44 / 3600, 65 + 25 / 60 + 25 / 3600),
                    (32 + 36 / 60 + 2 / 3600, 45 + 1 / 60 + 52 / 3600),
                    (46 + 34 / 60 + 17 / 3600, 47 + 26 / 60 + 31 / 3600),
                    (58 + 29 / 60 + 52 / 3600, 39 + 29 / 60 + 9 / 3600)
                ],
                "image_size": (1830, 810),
                "positional_angle_deg": 50 + 52 / 60 + 27 / 3600
            },
            {
                "pixel_coords": [(0, 0), (-336, -30), (-540, 80), (-532, 177),
                                (-627, 344), (-565, -280), (236, -161), (621, -312),
                                (35, -370), (-56, -209)
                                 ],
                "RA_Dec": [([16, 37, 14], [-10, -34, -7]), ([17, 10, 27], [-15, -43, -33]),
                           ([17, 37, 40], [-15, -23, -55]), ([17, 41, 30], [-12, -52, -30]),
                           ([17, 59, 6], [-9, -46, -21]), ([17, 22, 6], [-25, 0, 4]),
                           ([16, 4, 26], [-11, -22, -33]), ([15, 17, 4], [-9, 23, 11]),
                           ([16, 12, 4], [-19, 27, 50]), ([16, 31, 13], [-16, -36, -54])
                           ],
                "AzAlt_deg": [
                    (231 + 6 / 60 + 23 / 3600, 13 + 21 / 60 + 49 / 3600),
                    (221 + 19 / 60 + 39 / 3600, 12 + 21 / 60 + 1 / 3600),
                    (215 + 14 / 60 + 9 / 3600, 15 + 10 / 60 + 15 / 3600),
                    (215 + 16 / 60 + 27 / 3600, 17 + 50 / 60 + 58 / 3600),
                    (212 + 4 / 60 + 33 / 3600, 22 + 13 / 60 + 24 / 3600),
                    (215 + 4 / 60 + 35 / 3600, 5 + 0 / 60 + 22 / 3600),
                    (237 + 48 / 60 + 25 / 3600, 8 + 41 / 60 + 27 / 3600),
                    (248 + 43 / 60 + 27 / 3600, 4 + 5 / 60 + 57 / 3600),
                    (232 + 4 / 60 + 9 / 3600, 2 + 49 / 60 + 6 / 3600),
                    (229 + 29 / 60 + 13.7 / 3600, 7 + 24 / 60 + 6 / 3600)
                ],
                "image_size": (1842, 808),
                "positional_angle_deg": 13 + 21 / 60 + 49 / 3600
            }
        ]

    def test_all_cases(self):
        for idx, case in enumerate(self.test_cases):
            with self.subTest(f"Test Case #{idx + 1}"):
                stars = []
                for i in range(len(case["pixel_coords"])):
                    x, y = case["pixel_coords"][i]
                    ra_h, ra_m, ra_s = case["RA_Dec"][i][0]
                    dec_d, dec_m, dec_s = case["RA_Dec"][i][1]

                    ra_deg = (ra_h * 3600 + ra_m * 60 + ra_s) / 86400 * 360
                    dec_deg = dec_d + dec_m / 60 + dec_s / 3600

                    stars.append(Star(x, y, np.deg2rad(ra_deg), np.deg2rad(dec_deg)))

                w, h = case["image_size"]
                pos_angle_rad = np.deg2rad(case["positional_angle_deg"])
                cluster = Star_Cluster(stars, w, h, pos_angle_rad)

                true_vals = np.array(case["AzAlt_deg"])
                computed_vals = np.array([
                    np.rad2deg([star.Az, star.Alt]) for star in cluster.stars
                ])

                az_offset = true_vals[0, 0] - computed_vals[0, 0]
                computed_vals[:, 0] += az_offset

                error = np.linalg.norm(computed_vals - true_vals, axis=1)
                mean_error = np.mean(error)

                print(f"[Test Case {idx+1}] Average angular error: {mean_error:.2f}°")
                self.assertLess(
                    mean_error,
                    5.0,
                    f"Average angular error too high ({mean_error:.2f}°)"
                )

                if self.DEBUG:
                    self._plot_debug(true_vals, computed_vals, idx + 1)

    def _plot_debug(self, true_vals, computed_vals, test_num):
        plt.figure(figsize=(8, 6))
        plt.scatter(computed_vals[:, 0], computed_vals[:, 1], color='blue', label='Predicted Az/Alt')
        plt.scatter(true_vals[:, 0], true_vals[:, 1], color='red', label='Ground Truth Az/Alt')
        plt.xlabel("Azimuth (degrees)")
        plt.ylabel("Altitude (degrees)")
        plt.title(f"Test Case #{test_num}: Az/Alt Prediction vs Ground Truth")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()


if __name__ == "__main__":
    unittest.main()